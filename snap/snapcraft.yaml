name: mirros-one
adopt-info: snap-meta
summary: An operating system tailored for smart mirrors.
description: |
  mirr.OS is the operating system for the glancr smart mirror,
  but can be used for other kiosk/display-only devices.
  Currently meant to be deployed on a Raspberry Pi (min model 3B).
  Learn more at https://glancr.de
confinement: strict
base: core18
environment:
  RAILS_DATABASE_SOCKET: "${SNAP_COMMON}/mysql/run/mysqld.sock"
  # Specify confined paths so that hooks can access snapped bins/libs.
  PATH: "$SNAP/usr/sbin:$SNAP/usr/bin:$SNAP/sbin:$SNAP/bin:$PATH"

hooks:
  # Hooks need the same plugs as the backend service, to ensure Rake tasks do not face permissions issues.
  install:
    plugs:
      - network
      - network-bind
      - network-control
      - network-manager
      - shutdown
      - timezone-control
      - timeserver-control
      - time-control
      - dbus-cogctl
  pre-refresh:
    plugs:
      - network
      - network-bind
      - network-control
      - network-manager
      - shutdown
      - timezone-control
      - timeserver-control
      - time-control
      - dbus-cogctl
  post-refresh:
    plugs:
      - network
      - network-bind
      - network-control
      - network-manager
      - shutdown
      - timezone-control
      - timeserver-control
      - time-control
      - dbus-cogctl
  connect-plug-network-manager:
    plugs: [network-manager]
  # TODO: Maybe just move all plugs to a root-level plugs dict

plugs:
  dbus-cogctl:
    interface: dbus
    bus: system
    name: com.igalia.Cog

apps:
  # SERVICES
  # MySQL daemon
  mysql:
    command: bin/start-mysql-server
    #before: [backend]
    daemon: simple
    restart-condition: always
    plugs:
      - network
      - network-bind
      - process-control
  redis:
    command: usr/bin/redis-server $SNAP/redis.conf
    daemon: simple
    restart-condition: always
    plugs:
      - network
      - network-bind
      #- network-observe
  backend:
    command: wrapper $SNAP/bin/start-stack
    after: [mysql, nginx, redis]
    daemon: simple
    plugs:
      - network
      - network-bind
      - network-control
      - network-manager
      - shutdown
      - timezone-control
      - timeserver-control # required for SetNTP() method
      - time-control # Backend sets system time during setup
      - dbus-cogctl
  nginx:
    command: usr/sbin/nginx -c $SNAP_COMMON/nginx.conf
    #before: [backend]
    daemon: forking
    stop-command: usr/sbin/nginx -s stop
    plugs: [network, network-bind]
  dns:
    command: bin/start-dns
    daemon: simple
    plugs:
      - network
      - network-bind
      - network-control
  reload-browser:
    command: bin/reload-browser
    daemon: oneshot
    after:
      - nginx
      - backend
    plugs: [dbus-cogctl]
  # COMMANDS
  db-console:
    command: bin/run-mysql-client mirrOS_api_production
  rails-console:
    command: bin/rails-console
    plugs:
      - network
      - network-bind
      - network-control
      - network-manager
      - shutdown
      - timezone-control
      - timeserver-control # required for SetNTP() method
      - time-control # Backend sets system time during setup
      - dbus-cogctl
  redis-console:
    command: usr/bin/redis-cli
    plugs:
      - network
      - network-bind
      #- network-observe
  create-backup:
    command: bin/create-backup
  restore-backup:
    command: bin/restore-backup

layout:
  $SNAP/api/storage:
    bind: $SNAP_DATA/rails/storage
  $SNAP/api/tmp:
    bind: $SNAP_DATA/rails/tmp
  $SNAP/api/log:
    bind: $SNAP_DATA/rails/log
  $SNAP/api/db:
    bind: $SNAP_DATA/rails/db
  $SNAP/api/.bundle:
    bind: $SNAP_DATA/rails/.bundle
  $SNAP/api/vendor:
    bind: $SNAP_DATA/rails/vendor
  $SNAP/api/Gemfile:
    bind-file: $SNAP_DATA/rails/Gemfile
  $SNAP/api/Gemfile.lock:
    bind-file: $SNAP_DATA/rails/Gemfile.lock
  /etc/ImageMagick-6:
    bind: $SNAP/etc/ImageMagick-6
  /usr/lib/$SNAPCRAFT_ARCH_TRIPLET/ImageMagick-6.8.9:
    bind: $SNAP/usr/lib/$SNAPCRAFT_ARCH_TRIPLET/ImageMagick-6.8.9
    # FIXME: can this be generalized for 6.x.x releases?

parts:
  snap-meta:
    plugin: nil
    source: .
    source-type: git
    override-build: |
      SNAP_REVISION=$(git describe --always)
      snapcraftctl set-version "$SNAP_REVISION"
      # scriptlets are run with /bin/sh -e â€“ no bash pattern matching
      if echo "$SNAP_REVISION" | grep -q -E '^[0-9]+.[0-9]+.[0-9]+$'; then
        snapcraftctl set-grade stable
      else
        snapcraftctl set-grade devel
      fi

  # Provides all git patches in $SNAPCRAFT_STAGE, but excludes them from priming
  patches:
    plugin: dump
    source: src/patches
    prime:
      - -*

  mysql:
    plugin: dump
    source: src/mysql
    stage-packages: [mysql-server, libaio1]

  nginx:
    plugin: dump
    source: src/nginx
    stage-packages: [nginx, gettext-base]

  redis:
    plugin: dump
    source: src/redis
    stage-packages:
      - redis-server

  dnsmasq:
    #after: [patches]
    plugin: make
    source: https://git.launchpad.net/~snappy-hwe-team/snappy-hwe-snaps/+git/wifi-ap
    source-type: git
    source-branch: dnsmasq/2.75
    #source: http://www.thekelleys.org.uk/dnsmasq/dnsmasq-2.80.tar.gz
    build-packages:
      - build-essential
    make-parameters:
      - PREFIX=/
    #override-pull: |
    #  snapcraftctl pull
    #  git apply "${SNAPCRAFT_STAGE}/dnsmasq_2.80-remove_setgroups.patch"
    organize:
      sbin/dnsmasq: bin/dnsmasq
    filesets:
      binaries:
        - bin/dnsmasq
    prime:
      - $binaries

  dnsmasq-config:
    source: src/dnsmasq
    plugin: dump

  mirros-display:
    source: https://gitlab.com/glancr/mirros_display/-/jobs/artifacts/v1.7.0/download?job=build-tag
    source-type: zip
    plugin: dump
    organize:
      dist: display

  mirros-settings:
    source: https://gitlab.com/glancr/mirros_settings/-/jobs/artifacts/v1.8.1/download?job=build-tag
    source-type: zip
    plugin: dump
    organize:
      dist: settings

  mirros-api:
    after: [snap-meta]
    source: https://gitlab.com/glancr/mirros_api/-/jobs/1083213269/artifacts/download?file_type=archive
    source-type: zip
    plugin: ruby # dump
    ruby-version: "2.6.6"
    # build-snaps: [ruby]
    # stage-snaps: [ruby]
    build-packages: [libmysqlclient-dev, wget, libffi-dev]
    stage-packages:
      - libatm1
      - libmysqlclient20
      - wireless-tools # iwlist for scanning while AP is active
      - dbus # provides dbus-send for shutdown command
      # Image resizing
      - graphicsmagick-imagemagick-compat
      - imagemagick-6-common
    override-build: |
      snapcraftctl build

      cp -a * $SNAPCRAFT_PART_INSTALL # TODO: remove once using stage-snaps
      cd $SNAPCRAFT_PART_INSTALL/api

      # FIXME: work out proper env variables for ruby snap version. RUBYLIB is set by ruby plugin, but not by snap.
      # export RUBYLIB=$SNAPCRAFT_PART_INSTALL/lib/ruby/2.6.0:$SNAPCRAFT_PART_INSTALL/lib/ruby/2.6.0/$SNAPCRAFT_ARCH_TRIPLET:$RUBYLIB

      #/root/parts/mirros-api/install/lib/ruby/2.6.0/rubygems.rb:9:in `require': cannot load such file -- rbconfig (LoadError)

      # which ruby

      bin/bundle install --path vendor/bundle -j $(nproc) --without development test
      # TODO: ruby.bundle once using stage-snaps

      # To allow installing new gems in the snap, they have to be in $SNAP_DATA.
      # Layouts above maps a bind-mount.
      mv .bundle bundle_installed
      mv vendor vendor_installed
      mv Gemfile Gemfile_installed
      mv Gemfile.lock Gemfile.lock_installed
      mv db db_installed

      # Ensure directories are removed because they'll be replaced with symlinks
      rm -rf $SNAPCRAFT_PART_INSTALL/api/tmp $SNAPCRAFT_PART_INSTALL/api/log

      # Write a wrapper that sets our environment (so we can avoid setting this
      # in the YAML).
      cat << EOF >> $SNAPCRAFT_PART_INSTALL/wrapper
      #!/bin/sh
      export LD_LIBRARY_PATH="\$LD_LIBRARY_PATH:$(echo "$LD_LIBRARY_PATH" | sed "s|$SNAPCRAFT_PART_INSTALL|\$SNAP|g")"
      export RUBYLIB="$(echo "$RUBYLIB" | sed "s|$SNAPCRAFT_PART_INSTALL|\$SNAP|g")"
      export GEM_HOME="$(echo "$GEM_HOME" | sed "s|$SNAPCRAFT_PART_INSTALL|\$SNAP|g")"
      export GEM_PATH="$(echo "$GEM_PATH" | sed "s|$SNAPCRAFT_PART_INSTALL|\$SNAP|g")"
      exec "\$@"
      EOF

      chmod a+x $SNAPCRAFT_PART_INSTALL/wrapper

      # FIXME: Replace hardcoded ruby path with our snap path
      # find bin/ -type f -exec grep -Iq . {} \; -and -exec sed -i -e 's|^#!/snap/ruby/current/bin/ruby$|#!/snap/mirros-one/current/bin/ruby|' {} \;

      # Get ruby include files for installed version. Ruby plugin throws them away, and copying with relative paths is prone to break on different builders. Required for runtime extension installations that bring native extensions.
      # TODO: Check if ruby snap brings a usable version of this.

      # TODO: This can be improved, e.g. not fiddling with $PRIME since install dir contents are copied anyway.
      cd $SNAPCRAFT_PART_INSTALL
      RUBYVERSION=$(ruby -v | egrep -o "[0-9]+\.[0-9]+\.[0-9]+")
      MAJMIN=$(expr substr $RUBYVERSION 1 3)
      wget https://cache.ruby-lang.org/pub/ruby/${MAJMIN}/ruby-${RUBYVERSION}.tar.gz
      tar -xf ruby-${RUBYVERSION}.tar.gz
      cp -r "ruby-${RUBYVERSION}/include" "$SNAPCRAFT_PRIME"
      rm ruby-${RUBYVERSION}.tar.gz
      rm -rf ruby-${RUBYVERSION}

  # Scripts and wrappers
  start-stack:
    source: src/start-stack
    plugin: dump
  cli:
    source: src/cli
    plugin: dump
