name: mirros-one
version: "0.2.6"
summary: An operating system tailored for smart mirrors.
description: |
  mirr.OS is the operating system for the glancr smart mirror, but can be used for other kiosk/display-only devices. Currently meant to be deployed on a Raspberry Pi (min model 3B). Learn more at https://glancr.de
grade: devel
confinement: devmode # strict

environment:
  RAILS_DATABASE_LOCATION: "$SNAP_DATA/production.sqlite3"
  # Specify confined paths so that hooks can access snapped bins/libs.
  PATH: "$SNAP/usr/sbin:$SNAP/usr/bin:$SNAP/sbin:$SNAP/bin:$PATH"
  LD_LIBRARY_PATH: "$LD_LIBRARY_PATH:$SNAP/lib:$SNAP/usr/lib:$SNAP/usr/lib/x86_64-linux-gnu"
  GEM_PATH: "$SNAP/lib/ruby/gems/2.5.0"
  RUBYLIB: "$SNAP/lib/ruby/2.5.0:$SNAP/lib/ruby/2.5.0/armv7l-linux-eabihf:$SNAP/lib/ruby/2.5.0:$SNAP/lib/ruby/2.5.0/x86_64-linux"
  GEM_HOME: "$SNAP/lib/ruby/gems/2.5.0"

apps:
  # SERVICES
  backend:
    command: sh $SNAP/bin/start-stack.sh
    daemon: simple
    plugs: [network, network-bind, network-manager]
  nginx:
    command: usr/sbin/nginx -c $SNAP_COMMON/nginx.conf
    daemon: forking
    plugs: [network, network-bind]
  dns:
    command: dnsmasq -k -u root -g root --pid-file=$SNAP_USER_DATA/dnsmasq.pid -l $SNAP_DATA/dnsmasq.leases -C $SNAP/dnsmasq.conf
    daemon: simple
    plugs:
      - network
      - network-bind
      - network-control # TODO: is this required for dnsmasq to function?

  # COMMANDS
  debug:
    command: sh $SNAP/bin/debug.sh
  setup:
    command: sh $SNAP/bin/setup.sh
    plugs: [network-manager]

# Supported since snapd 2.36, but snapcraft on the build farm is not up-to-date
passthrough:
  layout:
    $SNAP/api/tmp:
      bind: $SNAP_DATA/rails/tmp
    $SNAP/api/log:
      bind: $SNAP_DATA/rails/log
    $SNAP/api/db:
      bind: $SNAP_DATA/rails/db
    $SNAP/api/vendor:
      bind: $SNAP_DATA/rails/vendor
    $SNAP/api/Gemfile:
      bind-file: $SNAP_DATA/rails/Gemfile
    $SNAP/api/Gemfile.lock:
      bind-file: $SNAP_DATA/rails/Gemfile.lock

parts:
  nginx:
    source: src/nginx
    stage-packages: [nginx]
    plugin: dump

  dnsmasq:
    source: src/dnsmasq
    plugin: dump
    stage-packages: [dnsmasq]
    organize:
      usr/sbin/dnsmasq: bin/dnsmasq
    filesets:
      binandconf:
        - bin/dnsmasq
        - dnsmasq.conf
    stage:
      - $binandconf
    prime:
      - $binandconf

  # TODO: Use pre-built ZIP from GitLab CI to speed things up.
  mirros-display:
    source: https://gitlab.com/glancr/mirros_display.git
    source-branch: master
    source-depth: 1
    plugin: nodejs
    node-packages:
      - "@vue/cli"
    node-engine: "11.3.0"
    node-package-manager: "yarn"
    npm-run:
      - "init"
      - "build"
    override-build: |
      snapcraftctl build
      mkdir $SNAPCRAFT_PART_INSTALL/display
      cp -a dist/* $SNAPCRAFT_PART_INSTALL/display
    stage:
      - display/

  # TODO: Use pre-built ZIP from GitLab CI to speed things up.
  mirros-settings:
    source: https://gitlab.com/glancr/mirros_settings.git
    source-branch: master
    source-depth: 1
    plugin: nodejs
    node-packages:
      - "@vue/cli"
    node-engine: "11.3.0"
    node-package-manager: "yarn"
    npm-run:
      - "init"
      - "build"
    override-build: |
      snapcraftctl build
      mkdir $SNAPCRAFT_PART_INSTALL/settings
      cp -a dist/* $SNAPCRAFT_PART_INSTALL/settings
    stage:
      - settings/

  mirros-api:
    source: https://gitlab.com/glancr/mirros_api.git
    source-branch: master # source-tag: $SNAPCRAFT_PROJECT_VERSION
    source-depth: 1
    build-packages: [libsqlite3-dev]
    stage-packages: [sqlite3, wireless-tools, network-manager]
    plugin: ruby
    ruby-version: "2.5.1"
    gems: [bundler]

    override-build: |
      mkdir $SNAPCRAFT_PART_INSTALL/api
      cp -a * $SNAPCRAFT_PART_INSTALL/api
      snapcraftctl build
      cd $SNAPCRAFT_PART_INSTALL/api
      bin/bundle install --path vendor/bundle --without development test

      # To allow installing new gems in the snap, they have to be in $SNAP_DATA. Layouts above maps a bind-mount.
      mv vendor vendor_installed
      mv Gemfile Gemfile_installed
      mv Gemfile.lock Gemfile.lock_installed
      mv db db_installed

      # Ensure that snap version and Rails backend version are in sync
      echo "SNAP_VERSION = '$SNAPCRAFT_PROJECT_VERSION'.freeze" > config/version.rb

      # TODO: Remove once those are untracked
      rm -rf $SNAPCRAFT_PART_INSTALL/api/tmp $SNAPCRAFT_PART_INSTALL/api/log

  # Scripts and wrappers
  start-stack:
    source: src/start-stack
    plugin: dump
  setup:
    source: src/setup
    plugin: dump

  debug:
    source: src/debug
    plugin: dump
