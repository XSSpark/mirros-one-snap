name: mirros-one
adopt-info: snap-meta
summary: An operating system tailored for smart mirrors.
description: |
  mirr.OS is the operating system for the glancr smart mirror,
  but can be used for other kiosk/display-only devices.
  Currently meant to be deployed on a Raspberry Pi (min model 3B).
  Learn more at https://glancr.de
confinement: strict
base: core
environment:
  RAILS_DATABASE_SOCKET: "${SNAP_COMMON}/mysql/run/mysqld.sock"
  RAILS_DATABASE_LOCATION: "$SNAP_DATA/production.sqlite3"
  # Specify confined paths so that hooks can access snapped bins/libs.
  PATH: "$SNAP/usr/sbin:$SNAP/usr/bin:$SNAP/sbin:$SNAP/bin:$PATH"

hooks:
  install:
    plugs: [network, network-bind]
  post-refresh:
    plugs: [network]
  connect-plug-network-manager:
    plugs: [network-manager]
  # TODO: Maybe just move all plugs to a root-level plugs dict

apps:
  # SERVICES
  # MySQL daemon
  mysql:
    command: start-mysql-server
    #before: [backend]
    daemon: simple
    restart-condition: always
    plugs: [network, network-bind, process-control]
  backend:
    command: wrapper sh $SNAP/bin/start-stack.sh
    #after: [mysql, nginx]
    daemon: simple
    plugs:
      - network
      - network-bind
      - network-control
      - network-manager
      - shutdown
      - timezone-control
      - timeserver-control # required for SetNTP() method
      - time-control # Backend sets system time during setup
  nginx:
    command: usr/sbin/nginx -c $SNAP_COMMON/nginx.conf
    #before: [backend]
    daemon: forking
    stop-command: usr/sbin/nginx -s stop
    plugs: [network, network-bind]
  dns:
    command: sh $SNAP/bin/start-dns.sh
    daemon: simple
    plugs:
      - network
      - network-bind
      - network-control
  # COMMANDS
  setup:
    command: sh $SNAP/bin/setup.sh
    plugs: [network-manager]
  db-console:
    command: run-mysql-client

passthrough:
  layout:
    $SNAP/api/storage:
      bind: $SNAP_DATA/rails/storage
    $SNAP/api/tmp:
      bind: $SNAP_DATA/rails/tmp
    $SNAP/api/log:
      bind: $SNAP_DATA/rails/log
    $SNAP/api/db:
      bind: $SNAP_DATA/rails/db
    $SNAP/api/.bundle:
      bind: $SNAP_DATA/rails/.bundle
    $SNAP/api/vendor:
      bind: $SNAP_DATA/rails/vendor
    $SNAP/api/Gemfile:
      bind-file: $SNAP_DATA/rails/Gemfile
    $SNAP/api/Gemfile.lock:
      bind-file: $SNAP_DATA/rails/Gemfile.lock

parts:
  snap-meta:
    plugin: nil
    source: .
    source-type: git
    override-build: |
      SNAP_REVISION=$(git describe --always)
      snapcraftctl set-version "$SNAP_REVISION"
      # scriptlets are run with /bin/sh -e â€“ no bash pattern matching
      if echo "$SNAP_REVISION" | grep -q -E '^[0-9]+.[0-9]+.[0-9]+$'; then
        snapcraftctl set-grade stable
      else
        snapcraftctl set-grade devel
      fi

  mysql:
    plugin: dump
    source: src/mysql
    stage-packages: [mysql-server, libaio1]

  nginx:
    source: src/nginx
    stage-packages: [nginx, gettext-base]
    plugin: dump

  dnsmasq:
    plugin: make
    source: https://git.launchpad.net/~snappy-hwe-team/snappy-hwe-snaps/+git/wifi-ap
    source-type: git
    source-branch: dnsmasq/2.75
    build-packages:
      - build-essential
    make-parameters:
      - PREFIX=/
    organize:
      sbin/dnsmasq: bin/dnsmasq
    filesets:
      binaries:
        - bin/dnsmasq
    prime:
      - $binaries

  dnsmasq-config:
    source: src/dnsmasq
    plugin: dump

  mirros-display:
    source: https://gitlab.com/glancr/mirros_display/-/jobs/artifacts/0.7.2/download?job=build-tag
    source-type: zip
    plugin: dump
    organize:
      dist: display

  mirros-settings:
    source: https://gitlab.com/glancr/mirros_settings/-/jobs/artifacts/0.7.2/download?job=build-tag
    source-type: zip
    plugin: dump
    organize:
      dist: settings

  mirros-api:
    after: [snap-meta]
    source: https://gitlab.com/glancr/mirros_api/-/jobs/artifacts/0.8.4/download?job=zipfile
    source-type: zip
    plugin: ruby
    ruby-version: "2.6.3"
    #build-snaps: [ruby]
    #stage-snaps: [ruby]
    build-packages: [libmysqlclient-dev, wget]
    stage-packages:
      - libatm1
      - libmysqlclient20
      - wireless-tools
      - network-manager
      - dbus # provides dbus-send
    override-build: |
      snapcraftctl build

      cp -a * $SNAPCRAFT_PART_INSTALL # TODO: remove once using stage-snaps
      cd $SNAPCRAFT_PART_INSTALL/api

      bin/bundle install --path vendor/bundle -j $(nproc) --without development test
      # TODO: ruby.bundle once using stage-snaps

      # To allow installing new gems in the snap, they have to be in $SNAP_DATA.
      # Layouts above maps a bind-mount.
      mv .bundle bundle_installed
      mv vendor vendor_installed
      mv Gemfile Gemfile_installed
      mv Gemfile.lock Gemfile.lock_installed
      mv db db_installed

      # TODO: Remove once those are untracked
      rm -rf $SNAPCRAFT_PART_INSTALL/api/tmp $SNAPCRAFT_PART_INSTALL/api/log

      # Write a wrapper that sets our environment (so we can avoid setting this
      # in the YAML).
      cat << EOF >> $SNAPCRAFT_PART_INSTALL/wrapper
      #!/bin/sh
      export LD_LIBRARY_PATH="\$LD_LIBRARY_PATH:$(echo "$LD_LIBRARY_PATH" | sed "s|$SNAPCRAFT_PART_INSTALL|\$SNAP|g")"
      export RUBYLIB="$(echo "$RUBYLIB" | sed "s|$SNAPCRAFT_PART_INSTALL|\$SNAP|g")"
      export GEM_HOME="$(echo "$GEM_HOME" | sed "s|$SNAPCRAFT_PART_INSTALL|\$SNAP|g")"
      export GEM_PATH="$(echo "$GEM_PATH" | sed "s|$SNAPCRAFT_PART_INSTALL|\$SNAP|g")"
      exec "\$@"
      EOF

      chmod a+x $SNAPCRAFT_PART_INSTALL/wrapper

      # Get ruby include files for installed version. Ruby plugin throws them away, 
      # and copying with relative paths is prone to break on differeny builders.

      # TODO: This can be improved, e.g. not fiddling with $PRIME since install dir contents are copied anyway.
      cd $SNAPCRAFT_PART_INSTALL
      RUBYVERSION=$(ruby -v | egrep -o "[0-9]+\.[0-9]+\.[0-9]+")
      MAJMIN=$(expr substr $RUBYVERSION 1 3)
      wget https://cache.ruby-lang.org/pub/ruby/${MAJMIN}/ruby-${RUBYVERSION}.tar.gz
      tar -xf ruby-${RUBYVERSION}.tar.gz
      cp -r "ruby-${RUBYVERSION}/include" "$SNAPCRAFT_PRIME"
      rm ruby-${RUBYVERSION}.tar.gz
      rm -rf ruby-${RUBYVERSION}

  # Scripts and wrappers
  start-stack:
    source: src/start-stack
    plugin: dump
  setup:
    source: src/setup
    plugin: dump
