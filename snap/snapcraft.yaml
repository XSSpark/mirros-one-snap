name: mirros-one
version: "0.3.1"
summary: An operating system tailored for smart mirrors.
description: |
  mirr.OS is the operating system for the glancr smart mirror,
  but can be used for other kiosk/display-only devices.
  Currently meant to be deployed on a Raspberry Pi (min model 3B).
  Learn more at https://glancr.de
confinement: strict

environment:
  RAILS_DATABASE_LOCATION: "$SNAP_DATA/production.sqlite3"
  # Specify confined paths so that hooks can access snapped bins/libs.
  PATH: "$SNAP/usr/sbin:$SNAP/usr/bin:$SNAP/sbin:$SNAP/bin:$PATH"

hooks:
  install:
    plugs: [network]
  connect-plug-network-manager:
    plugs: [network-manager]

apps:
  # SERVICES
  backend:
    command: wrapper sh $SNAP/bin/start-stack.sh
    daemon: simple
    plugs:
      - network
      - network-bind
      - network-control
      - network-manager
      - shutdown
  nginx:
    command: usr/sbin/nginx -c $SNAP_COMMON/nginx.conf
    daemon: forking
    plugs: [network, network-bind]
  dns:
    command: sh $SNAP/bin/start-dns.sh
    daemon: simple
    plugs:
      - network
      - network-bind
      - network-control

  # COMMANDS
  setup:
    command: sh $SNAP/bin/setup.sh
    plugs: [network-manager]

# Supported since snapd 2.36, but snapcraft on the build farm is not up-to-date
passthrough:
  layout:
    $SNAP/api/tmp:
      bind: $SNAP_DATA/rails/tmp
    $SNAP/api/log:
      bind: $SNAP_DATA/rails/log
    $SNAP/api/db:
      bind: $SNAP_DATA/rails/db
    $SNAP/api/vendor:
      bind: $SNAP_DATA/rails/vendor
    $SNAP/api/Gemfile:
      bind-file: $SNAP_DATA/rails/Gemfile
    $SNAP/api/Gemfile.lock:
      bind-file: $SNAP_DATA/rails/Gemfile.lock

parts:
  nginx:
    source: src/nginx
    stage-packages: [nginx, gettext-base]
    plugin: dump

  dnsmasq:
    plugin: make
    source: https://git.launchpad.net/~snappy-hwe-team/snappy-hwe-snaps/+git/wifi-ap
    source-type: git
    source-branch: dnsmasq/2.75
    build-packages:
      - build-essential
    make-parameters:
      - PREFIX=/
    organize:
      sbin/dnsmasq: bin/dnsmasq
    filesets:
      binaries:
        - bin/dnsmasq
    prime:
      - $binaries

  dnsmasq-config:
    source: src/dnsmasq
    plugin: dump

  mirros-display:
    source: https://gitlab.com/glancr/mirros_display/-/jobs/artifacts/0.2.0/download?job=build-tag
    source-type: zip
    plugin: dump
    organize:
      dist: display

  mirros-settings:
    source: https://gitlab.com/glancr/mirros_settings/-/jobs/artifacts/0.3.0/download?job=build-tag
    source-type: zip
    plugin: dump
    organize:
      dist: settings

  mirros-api:
    source: https://gitlab.com/glancr/mirros_api/-/jobs/artifacts/master/download?job=zipfile
    source-type: zip
    plugin: ruby
    ruby-version: "2.5.1"
    #gems: [bundler]
    build-packages: [libsqlite3-dev]
    stage-packages:
      - libatm1
      - sqlite3
      - wireless-tools
      - network-manager
      - systemd
      - systemd-sysv
    override-build: |
      snapcraftctl build
      #export GEM_HOME=$SNAPCRAFT_PART_INSTALL/gems
      #export GEM_PATH=$SNAPCRAFT_PART_INSTALL
      gem install --no-document bundler
      cp -a * $SNAPCRAFT_PART_INSTALL
      cd $SNAPCRAFT_PART_INSTALL/api
      bin/bundle install --path vendor/bundle -j $(nproc) --without development test

      # To allow installing new gems in the snap, they have to be in $SNAP_DATA.
      # Layouts above maps a bind-mount.
      mv vendor vendor_installed
      mv Gemfile Gemfile_installed
      mv Gemfile.lock Gemfile.lock_installed
      mv db db_installed

      # Ensure that snap version and Rails backend version are in sync
      echo "SNAP_VERSION = '$SNAPCRAFT_PROJECT_VERSION'.freeze" > config/version.rb

      # TODO: Remove once those are untracked
      rm -rf $SNAPCRAFT_PART_INSTALL/api/tmp $SNAPCRAFT_PART_INSTALL/api/log

      # Write a wrapper that sets our environment (so we can avoid setting this
      # in the YAML).
      cat << EOF >> $SNAPCRAFT_PART_INSTALL/wrapper
      #!/bin/sh
      export LD_LIBRARY_PATH="\$LD_LIBRARY_PATH:$(echo "$LD_LIBRARY_PATH" | sed "s|$SNAPCRAFT_PART_INSTALL|\$SNAP|g")"
      export RUBYLIB="$(echo "$RUBYLIB" | sed "s|$SNAPCRAFT_PART_INSTALL|\$SNAP|g")"
      export GEM_HOME="$(echo "$GEM_HOME" | sed "s|$SNAPCRAFT_PART_INSTALL|\$SNAP|g")"
      export GEM_PATH="$(echo "$GEM_PATH" | sed "s|$SNAPCRAFT_PART_INSTALL|\$SNAP|g")"
      exec "\$@"
      EOF
      chmod a+x $SNAPCRAFT_PART_INSTALL/wrapper

  # Scripts and wrappers
  start-stack:
    source: src/start-stack
    plugin: dump
  setup:
    source: src/setup
    plugin: dump
