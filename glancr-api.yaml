openapi: 3.0.0
externalDocs:
  url: 'https://gitlab.com/glancr/mirros_one/wikis/home'
  description: >-
    Extensive documentation of concepts, data models and general architecture of
    mirr.OS
info:
  version: 0.1.0
  title: mirr.OS REST API
  description: >
    Documentation of the mirr.OS REST API, the operating system for the [glancr
    Smart Mirror](https://glancr.de).




    ## General notes

    This API tries to adhere to the [JSON:API](http://jsonapi.org/format/)
    specification. Each endpoint [wraps resources in a
    top-level](http://jsonapi.org/format/#document-top-level) `data` member on
    2xx responses or `errors` member on 4xx/5xx responses.


    [Relationships](http://jsonapi.org/format/#document-resource-object-relationships)
    between different resource types are fixed: Deleting the relationship e. g.
    between widgets/sources and their respective instances would not make sense
    in this domain model. Widgets/sources may change their group membership
    after an update, but that is determined on the backend and not subject to
    modification through the API. Thus, the relationships are not exposed as a
    URL; neither do we include the `links.self` member in the relationship
    objects of resources.


    In cases where collections of sub-resources are required (e. g. to get all
    instances across all widgets), the [`include` request
    parameter](http://jsonapi.org/format/#fetching-includes) may be used on the
    parent resource's collection endpoint to include an array of sub-resources
    in the `included` top-level member. Example: `GET
    /widgets?include=instances` returns a collection of widgets in the `data`
    top-level member and a collection of instances in the `included` top-level
    member. To conform with the [“full linkage” requirement of
    JSON:API](http://jsonapi.org/format/#document-compound-documents), each
    included resource is also present as a Resource Identifier in the
    corresponding `relationships` of the primary data.


    ## Widgets and sources

    Widget instances and source instances are in an `n-to-n` relation: One
    widget instance can use multiple source instances, and one source instance
    can be used in multiple widget instances.
      
  contact:
    name: glancr Team
    url: 'https://glancr.de'
    email: kontakt@glancr.de
servers:
  - url: 'http://localhost/api/v1'
    description: Local API host
paths:
  /widgets:
    get:
      summary: Returns a list of installed widgets.
      tags:
        - Widgets
      parameters:
        - in: query
          name: include-available
          schema:
            type: boolean
          example: false
          description: Optional inclusion of widgets that are available for installation.
        - in: query
          name: uses-source
          schema:
            type: array
            items:
              type: string
          example:
            - google
          description: Optional filter by source(s) that are available for installation.
        - in: query
          name: include
          schema:
            type: array
            items:
              type: string
              enum:
                - instances
          example:
            - google
          description: Optional filter by source(s) that are available for installation.
      responses:
        '200':
          description: A JSON array of widgets
          content:
            application/vnd.api+json:
              schema:
                allOf:
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Widget'
                  - $ref: '#/components/schemas/JSONApiMember'
        '400':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
    post:
      summary: Install a widget.
      tags:
        - Widgets
      requestBody:
        description: >-
          The WidgetIdentifier for the widget to be installed. We use the widget
          machine name as a [client-generated
          ID](http://jsonapi.org/format/#crud-creating), since widget machine
          names are required to be unique.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WidgetIdentifier'
      responses:
        '200':
          description: Installs a new widget in the backend.
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Widget'
        '404':
          $ref: '#/components/responses/Error'
  '/widgets/{widgetId}':
    get:
      summary: Get a widget by its ID
      tags:
        - Widgets
      responses:
        '200':
          description: A single widget.
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Widget'
    patch:
      summary: Update a widget in the backend.
      tags:
        - Widgets
      requestBody:
        description: The WidgetIdentifier object for the widget to be updated.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  $ref: '#/components/schemas/WidgetIdentifier'
      responses:
        '200':
          description: Update successful.
        '404':
          description: Widget cannot be updated because it is not installed.
          $ref: '#/components/responses/Error'
        '409':
          description: >-
            There was a version conflict (e. g. the requested widget version is
            incompatible with the installed version of mirr.OS).
          $ref: '#/components/responses/Error'
    delete:
      summary: Uninstall a widget from the backend.
      tags:
        - Widgets
      responses:
        '204':
          description: Widgets successfully uninstalled
        '404':
          $ref: '#/components/responses/Error'
  '/widgets/{widgetId}/instances':
    get:
      summary: Get all instances of a widget.
      tags:
        - Widget Instances
      responses:
        '200':
          description: An array of instances for the widget.
          content:
            application/vnd.api+json:
              schema:
                allOf:
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/WidgetInstance'
                  - $ref: '#/components/schemas/JSONApiMember'
    post:
      summary: Create a new instance with default settings.
      tags:
        - Widget Instances
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  $ref: '#/components/schemas/WidgetIdentifier'
      responses:
        '201':
          description: The newly created instance with default settings.
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/WidgetInstance'
  '/widgets/{widgetId}/instances/{instanceId}':
    get:
      summary: Get an instance by its ID.
      tags:
        - Widget Instances
      responses:
        '200':
          description: A JSON object of this instance's configuration.
          content:
            application/vnd.api+json:
              schema:
                allOf:
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/WidgetInstance'
                  - $ref: '#/components/schemas/JSONApiMember'
    put:
      summary: Save updated settings for an instance.
      tags:
        - Widget Instances
      requestBody:
        description: The updated instance.
        required: true
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  $ref: '#/components/schemas/WidgetInstance'
      responses:
        '204':
          description: Instance was successfully updated.
    delete:
      summary: Delete an instance.
      tags:
        - Widget Instances
      responses:
        '204':
          description: Instance successfully deleted.
        '404':
          $ref: '#/components/responses/Error'
  /sources:
    get:
      summary: Returns a list of installed sources.
      tags:
        - Sources
      responses:
        '200':
          description: A JSON array of installed sources.
          content:
            application/vnd.api+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Source'
    post:
      summary: Install a source in the backend.
      tags:
        - Sources
      requestBody:
        description: >-
          The SourceIdentifier of the source that should be installed. We use
          the widget machine name as a [client-generated
          ID](http://jsonapi.org/format/#crud-creating), since widget machine
          names are required to be unique.
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/SourceIdentifier'
      responses:
        '201':
          description: The installed Source.
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Source'
  '/sources/{sourceId}':
    get:
      summary: Get a source by its ID.
      tags:
        - Sources
      responses:
        '200':
          description: The requested Source object.
          content:
            application/vnd.api+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Source'
  '/sources/{sourceId}/instances':
    get:
      summary: Get all instances of a source.
      tags:
        - Source Instances
      responses:
        '200':
          description: An array of instances for the source.
          content:
            application/vnd.api+json:
              schema:
                allOf:
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/SourceInstanceIdentifier'
                  - $ref: '#/components/schemas/JSONApiMember'
    post:
      summary: Create a new instance of this source with default settings.
      tags:
        - Source Instances
      requestBody:
        description: The
        required: true
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  $ref: '#/components/schemas/SourceIdentifier'
      responses:
        '201':
          description: The newly created instance with default settings.
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/SourceInstance'
  '/sources/{sourceId}/instances/{instanceId}':
    get:
      summary: Get a source instance by its ID.
      tags:
        - Source Instances
      responses:
        '200':
          description: A JSON object of this instance's configuration.
          content:
            application/vnd.api+json:
              schema:
                allOf:
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/SourceInstance'
                  - $ref: '#/components/schemas/JSONApiMember'
    put:
      summary: Updates settings for an instance.
      tags:
        - Source Instances
      requestBody:
        description: The updated instance.
        required: true
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  $ref: '#/components/schemas/WidgetInstance'
      responses:
        '204':
          description: Instance was successfully updated.
    delete:
      summary: Delete an instance from the backend.
      tags:
        - Source Instances
      responses:
        '204':
          description: Instance successfully deleted
        '404':
          $ref: '#/components/responses/Error'
  /groups:
    get:
      summary: List all available groups.
      tags:
        - Groups
      responses:
        '200':
          description: A list of all available groups.
          content:
            application/vnd.api+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
  '/groups/{groupId}':
    get:
      summary: Get group info.
      tags:
        - Groups
      responses:
        '200':
          description: Group description.
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Group'
  /services:
    get:
      summary: List all available services.
      tags:
        - Services
      responses:
        '200':
          description: A JSON object with all available services.
          content:
            application/vnd.api+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
  '/services/{serviceId}':
    get:
      summary: Get service info.
      tags:
        - Services
      responses:
        '200':
          description: Service description.
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Service'
    patch:
      tags:
        - Services
      summary: Change the state of a service (with optional parameters).
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  $ref: '#/components/schemas/Service'
      responses:
        '200':
          description: Description of available run parameters.
  /system:
    get:
      tags:
        - System
      summary: TODO mirr.OS basic information.
      responses:
        '200':
          description: meh
    patch:
      tags:
        - System
      summary: Update mirr.OS to the specified version.
      responses:
        '200':
          description: Update successful.
  /system/settings:
    get:
      tags:
        - System
      summary: TODO Get the current system settings.
      responses:
        '200':
          description: meh
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Setting'
    patch:
      tags:
        - System
      summary: Change the current system settings
      responses:
        '204':
          description: Setting successfully changed.
components:
  responses:
    Error:
      description: 4xx/5xx errors
      content:
        application/vnd.api+json:
          schema:
            allOf:
              - type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/JSONApiErrorObject'
              - $ref: '#/components/schemas/JSONApiMember'
  schemas:
    JSONApiMember:
      type: object
      properties:
        jsonapi:
          type: object
          properties:
            version:
              type: string
              example: '1.0'
    JSONApiResourceIdentifier:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum:
            - widget
            - widget-instance
            - source
            - source-instance
            - service
            - setting
    JSONApiResource:
      allOf:
        - $ref: '#/components/schemas/JSONApiResourceIdentifier'
        - type: object
          properties:
            attributes:
              type: object
            relationships:
              type: object
    JSONApiErrorObject:
      type: object
      properties:
        status:
          type: string
        title:
          type: string
          example: An error occured.
          description: >-
            a short, human-readable summary of the problem that SHOULD NOT
            change from occurrence to occurrence of the problem, except for
            purposes of localization.
    WidgetIdentifier:
      allOf:
        - $ref: '#/components/schemas/JSONApiResourceIdentifier'
      type: object
      properties:
        id:
          example: mywidget
        type:
          type: string
          enum:
            - widget
    Widget:
      allOf:
        - $ref: '#/components/schemas/JSONApiResource'
        - $ref: '#/components/schemas/WidgetIdentifier'
        - type: object
          properties:
            attributes:
              type: object
              properties:
                name:
                  type: string
                  example: MyWidget
                icon:
                  type: string
                  example: /icons/my-widget/icon.svg
                version:
                  type: string
                  pattern: '^\d{1}.\d{1}.\d{1}$'
                  example: 1.0.0
                creator:
                  type: string
                  example: Mr. Robot
                website:
                  type: string
                  example: 'https://glancr.de/modules/productivity/mywidget'
                languages:
                  type: array
                installed:
                  type: boolean
                  example: true
            relationships:
              type: object
              properties:
                groups:
                  type: object
                  properties:
                    links:
                      type: object
                      properties:
                        self:
                          type: string
                        related:
                          type: string
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/GroupIdentifier'
                instances:
                  type: object
                  properties:
                    links:
                      type: object
                      properties:
                        self:
                          type: string
                        related:
                          type: string
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/WidgetInstanceIdentifier'
    WidgetInstanceIdentifier:
      allOf:
        - $ref: '#/components/schemas/JSONApiResourceIdentifier'
        - type: object
          properties:
            id:
              example: mywidget-1
            type:
              type: string
              enum:
                - widget-instance
    WidgetInstance:
      allOf:
        - $ref: '#/components/schemas/WidgetInstanceIdentifier'
        - type: object
          properties:
            attributes:
              type: object
              properties:
                settings:
                  type: object
                position:
                  type: object
                  properties:
                    x:
                      type: integer
                      example: 4
                    'y':
                      type: integer
                    width:
                      type: integer
                      minimum: 1
                    height:
                      type: integer
                      minimum: 1
                data:
                  type: object
            relationships:
              type: object
              properties:
                widget:
                  type: object
                  properties:
                    data:
                      type: object
                      $ref: '#/components/schemas/WidgetIdentifier'
                source-instances:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/SourceInstanceIdentifier'
    SourceIdentifier:
      allOf:
        - $ref: '#/components/schemas/JSONApiResourceIdentifier'
        - type: object
          properties:
            id:
              example: google
            type:
              enum:
                - source
    Source:
      allOf:
        - $ref: '#/components/schemas/SourceIdentifier'
        - type: object
          properties:
            attributes:
              type: object
              properties:
                installed:
                  type: boolean
                  example: true
            relationships:
              type: object
              properties:
                groups:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/GroupIdentifier'
    SourceInstanceIdentifier:
      allOf:
        - $ref: '#/components/schemas/JSONApiResourceIdentifier'
        - type: object
          properties:
            id:
              example: mysource-1
            type:
              type: string
              enum:
                - source-instance
    SourceInstance:
      allOf:
        - $ref: '#/components/schemas/SourceInstanceIdentifier'
        - type: object
          properties:
            attributes:
              type: object
              properties:
                settings:
                  type: object
            relationships:
              type: object
              properties:
                source:
                  type: object
                  properties:
                    data:
                      type: object
                      $ref: '#/components/schemas/SourceIdentifier'
                widget-instances:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/WidgetInstanceIdentifier'
    GroupIdentifier:
      allOf:
        - $ref: '#/components/schemas/JSONApiResourceIdentifier'
        - type: object
          properties:
            id:
              example: calendar
            type:
              type: string
              enum:
                - group
    Group:
      allOf:
        - $ref: '#/components/schemas/GroupIdentifier'
        - type: object
          properties:
            meta:
              type: object
              properties:
                schema-docs:
                  type: string
                  example: 'https://tools.ietf.org/html/rfc7265'
            attributes:
              type: object
              properties:
                options-schema:
                  type: object
                  example:
                    accountName: String
                    calendars:
                      - String
                data-schema:
                  type: object
                  example:
                    calendarName: String
                    events:
                      - String
            relationships:
              type: object
              properties:
                widgets:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/WidgetIdentifier'
                sources:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/SourceIdentifier'
    ServiceIdentifier:
      allOf:
        - $ref: '#/components/schemas/JSONApiResourceIdentifier'
        - type: object
          properties:
            type:
              enum:
                - service
    Service:
      allOf:
        - $ref: '#/components/schemas/ServiceIdentifier'
        - type: object
          properties:
            id:
              example: access-point
            attributes:
              type: object
              properties:
                status:
                  type: string
                  example: start
                parameters:
                  type: object
                  example:
                    orientation: '3'
            relationships:
              type: object
              properties:
                provider:
                  type: object
                  properties:
                    data:
                      type: object
                      $ref: '#/components/schemas/WidgetIdentifier'
    SettingIdentifier:
      allOf:
        - $ref: '#/components/schemas/JSONApiResourceIdentifier'
        - type: object
          properties:
            id:
              example: user.mail
            type:
              enum:
                - setting
    Setting:
      allOf:
        - $ref: '#/components/schemas/SettingIdentifier'
        - type: object
          properties:
            attributes:
              type: object
              properties:
                value:
                  type: string
                  example: user@example.com
tags:
  - name: Widgets
    description: >-
      Widgets define how data gathered from sources is processed and displayed.
      They implement a settings dialog for configuration UI as well as frontend
      components. Widgets are installed or uninstalled through the configuration
      UI.
  - name: Widget Instances
    description: >-
      Widgets have 0 to n **instances**, each with separate settings and
      positioning.
  - name: Sources
    description: >-
      Sources define how data is retrieved from a data provider, including the
      necessary authentication.
  - name: Source Instances
    description: >-
      To enable multiple accounts for the same data provider, sources have 0-n
      instances with separate credentials.
  - name: Groups
    description: >
      **[WIP]** Groups describe the possible combinations of widgets and
      sources. Each source-type member of a group is expected to expose data to
      all widget-type members of the same group.
  - name: Services
    description: >
      **[WIP]** Services are called on the backend server, e. g. to run
      additional scripts, do maintenance or similar tasks.
  - name: System
    description: >
      **[WIP]** Endpoints for mirr.OS settings. Although they are similar to
      widgets and sources, mirr.OS cannot be instantiated or uninstalled.

                  
